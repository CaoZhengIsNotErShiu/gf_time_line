server:
  port: 8088
  #context-path: /
  tomcat:
        basedir: /root/time_line/temp


spring:
  application:
    name: TL
  profiles:
    active: test
  servlet:
    multipart:
      max-file-size: 30MB
      max-request-size: 100MB
  activemq:  #activemq
    broker-url: tcp://localhost:61616
    user: admin
    password: admin
  aop:
    proxy-target-class: true
    auto: true
  jms:
    #springboot 默认开启点对点，订阅需要手动开启
    #pub-sub-domain: false #false = Queue true = Topic
    pub-sub-domain: true #false = Queue true = Topic
  #这里使用的是yml的配置模式
  data:
      solr:
        host: http://127.0.0.1:8983/solr
  ## Redis 配置
  ## Redis数据库索引（默认为0）
  redis:
    database: 0
    ## Redis服务器地址
    host: 127.0.0.1
    ## Redis服务器连接端口
    port: 6379
    ## Redis服务器连接密码（默认为空）
    password:
    ## 连接池最大连接数（使用负值表示没有限制）
    pool:
        max-active: 8
    ## 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1
    ## 连接池中的最大空闲连接
        max-idle: 8
    ## 连接池中的最小空闲连接
        min-idle: 0
    ## 连接超时时间（毫秒）
    timeout: 1200


#自己定义队列名称
#myqueue: time-line-queue
#自己定义主题名称
mytopic: time-line-topic


#  http:
#    multipart:
#      max-file-size: 10Mb
#  redis:
#    host: 188.131.221.99
#    database: 1
#    port: 6379
#    password: 123456
#    pool:
#      max-active: 1000
#      max-wait: -1
#      max-idle: 10
#      min-idle: 2
#    timeout: 0

logging:
  config: classpath:log4j2.xml
log4j:
  isThreadContextMapInheritable: true
AsyncLogger:
  RingBufferSize: 1048576

disruptor:
  ringBufferSize: 2097152
  timeout: 6000
  # 等待策略
  # SLEEP //  SleepingWaitStrategy
  # YIELD //  YieldingWaitStrategy
  # BLOCK //  BlockingWaitStrategy
  # BUSYSPIN // BusySpinWaitStrategy
  # TIMEOUT //  TimeoutBlockingWaitStrategy
  #    如何进行等待下一个事件的策略
  waitStrategy: TIMEOUT





---
#本地开发环境配置
spring:
  profiles: local
  #
  #  thymeleaf:
  #    prefix: classpath:/templates/,classpath:/static/
  #
  #  resources:
  #    static-locations: classpath:/templates/,classpath:/static/
  #mysql配置
  datasource:
    name: tbc_common
    url: jdbc:mysql://10.233.1.90:3306/pictureDistinguish?useUnicode=true&characterEncoding=utf8
    username: root
    password:
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    # 下面为连接池的补充设置，应用到上面所有数据源中
    # 初始化大小，最小，最大
    initialSize: 5
    minIdle: 5
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    spring.datasource.filters: stat,wall,log4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据
    #useGlobalDataSourceStat: true

mybatis:
  mapperLocations: classpath:mapper/*Mapper.xml

---

#内测环境配置
spring:
  profiles: test

  #  thymeleaf:
  #    prefix: classpath:/templates/,classpath:/static/
  #  resources:
  #    static-locations: classpath:/templates/,classpath:/static/
  #mysql配置
  datasource:
    name: tbc_common
    url: jdbc:mysql://localhost:3306/time_line?useUnicode=true&characterEncoding=utf8
    username: root
    password: 123456
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    # 下面为连接池的补充设置，应用到上面所有数据源中
    # 初始化大小，最小，最大
    initialSize: 5
    minIdle: 5
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    spring.datasource.filters: stat,wall,log4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据
    #useGlobalDataSourceStat: true

mybatis:
  mapperLocations: classpath:mapper/*Mapper.xml


